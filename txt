POST /upload HTTP/1.1
Transfer-Encoding: chunked
Cache-Control: no-cache
Postman-Token: b70ba234-7adc-460b-b4f4-4846dec39f67
Host: localhost:8000
Connection: keep-alive
Content-Type: multipart/form-data; boundary=--------------------------233206782137384243882228
Content-Length: 5254

----------------------------233206782137384243882228
Content-Disposition: form-data; name=""; filename="Client.hpp"
Content-Type: application/octet-stream

#ifndef SOCKETCLIENT_HPP
#define SOCKETCLIENT_HPP

#include <iostream>
#include <string>
#include <cstring>
#include <cstdlib>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <netdb.h>
#include <arpa/inet.h> 
#include "../server/server.hpp"
#include <set>
#include <fcntl.h>
#include <vector>

class Client
{
    private:
        int clientSocket;
        std::string typeRequest;
        ssize_t readylen;
        ssize_t  Content_Length;
        std::string filename;
        std::string restRequest;
        std::string boundary;
        std::string Url;
        bool header;
        // response variables
        ssize_t lenSend;
    public:
        Client(/* args */);
        size_t getLenSend()
        {
            return lenSend;
        }
        void setLenSend(ssize_t len)
        {
            lenSend += len;
        }
        void clearLenSend()
        {
            lenSend = 0;
        }
        std::string getTypeRequset()
        {
            return typeRequest;
        }
        void setFileName(std::string name)
        {
            filename = name;
        }
        std::string getUrl()
        {
            return Url;
        }
        void setUrl(std::string url)
        {
            Url = url;
        }
        std::string getFileName()
        {
            return filename;
        }
        void setTypeRequset(std::string R)
        {
            typeRequest = R;
        }
        void setContentLength(ssize_t len)
        {
            Content_Length = len;
        }
        ssize_t getContentLength()
        {
            return Content_Length;
        }
        int getClientSocket()
        {
            return clientSocket;
        }
        std::string&  getRestRequest()
        {
            return restRequest;
        }
        void setRestRequest(char *buffer, ssize_t size)
        {
            for (ssize_t i = 0; i < size; i++)
                restRequest.push_back(buffer[i]);
        }
        void resetRestRequest()
        {
            restRequest.clear();    
        }
        void setClientSocket(int socket)
        {
            clientSocket = socket;
        }
        void setBoundaryRequest(std::string const& s)
        {
            boundary = s;
        }
        std::string&  getBoundarytSocket()
        {
            return boundary;
        }
        bool getHeaderStatus()
        {
            return header;
        }
        void setReadlen(ssize_t len)
        {
            readylen += len;
        }
        ssize_t getReadlen()
        {
            return readylen;
        }
        void setHeaderStatus(bool h)
        {
            header = h;
        }
        void resetData()
        {
            header = false;
            readylen = 0;
            lenSend = 0;
            clientSocket = 0;
            Content_Length = 0;
            filename = "";
            restRequest = "";
            boundary = "";
            typeRequest = "";
        }
        ~Client();
};



#endif //SOCKET_HPP

----------------------------233206782137384243882228
Content-Disposition: form-data; name=""; filename="compte.html"
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <style>
        body{
            text-align: center;
        }
        #name{
            width: 280px;
            margin-top: 100px;
            
            padding: 10px;
            border-radius: 5px;
            font-size: 18px;


        }
        #password{
            width: 280px;
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
            font-size: 18px;
            

        }
        #button{
            width: 280px;
            color: white;
            background-color:dodgerblue;
            border: 3px solid blue ;
            padding: 6px;
            margin-top: 20px;
            border-radius: 5px;
            font-family: sans-serif;
            font-size: 18px;
            font-style: normal;

        }
    </style>
    <input type="email" name="name" id="name" placeholder="entre ton nome ou email... " ><br>
    <input type="password" name="password" id="password" placeholder="entre ton password..."><br>
    <input type="submit" value="valide" id="button">
    <script>
        
        document.getElementById("button").addEventListener("click",()=>{
            var namme = document.getElementById('name').value;
            var password = document.getElementById('password').value;
            localStorage.setItem("name",namme);
            localStorage.setItem("password",password);
            alert("تم حفظ المعلومات");
            location.replace("conection.html");
        });
        
    </script>
</body>
</html>
----------------------------233206782137384243882228--

